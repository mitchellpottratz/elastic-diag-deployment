{"version":3,"sources":["logo.svg","serviceWorker.js","components/auth/Login.js","components/cards/ClusterHealth.js","components/segments/ClusterOverview.js","actions/clusterOverview.js","constants/actionTypes.js","components/cards/MetricCard.js","components/segments/ClusterStats.js","actions/clusterStats.js","components/common/NodeRoles.js","components/common/NodeDetails.js","components/common/Node.js","components/segments/Nodes.js","actions/nodes.js","components/common/IndexDetails.js","components/common/Index.js","components/segments/Indices.js","actions/indices.js","components/dashboard/index.js","App.js","reducers/userReducer.js","reducers/clusterOverviewReducer.js","reducers/clusterStatsReducer.js","reducers/nodesReducer.js","reducers/indicesReducer.js","reducers/rootReducer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Login","props","state","Component","ClusterHealth","status","this","Card","color","Content","Header","Statistic","Value","ClusterOverview","getClusterOverview","clusterOverview","Grid","Row","Column","computer","connect","content","dispatch","a","type","payload","clusterHealth","MetricCard","title","metric","ClusterStats","getData","setState","isLoading","getClusterStats","clusterStats","indexCount","indices","count","totalShardCount","shards","total","pShardCount","primaries","rShardCount","replication","docCount","docs","storeSize","store","size","fieldDataMemory","fielddata","memory_size","queryCacheSize","query_cache","segmentCount","segments","mobile","tablet","NodeRoles","nodeRoles","Segment","Group","horizontal","map","role","i","key","Icon","name","NodeDetails","nodeData","stringAttributes","data","push","Fragment","roles","Table","definition","Body","attribute","Cell","width","Node","activeIndex","index","handleClick","Accordion","Title","active","onClick","Nodes","getNodes","e","titleProps","newIndex","nodes","fluid","styled","node","nodeStats","IndexDetails","indexData","indexAttributes","Index","Indices","getIndices","toggleIndices","showIndices","indicesStats","Dashboard","Container","user","users","loggedIn","initialState","userReducer","action","clusterOverviewReducer","clusterStatsReducer","nodesReducer","indicesReducer","combineReducers","createStore","rootReducer","compose","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4015bea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\n\n\nclass Login extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Login</h1>\n      </div>\n    )\n  }\n}\n\nexport default Login;","import React, { Component } from 'react';\n\n// components\nimport { Card, Statistic } from 'semantic-ui-react'\n\n\nclass ClusterHealth extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { status } = this.props;\n\n    return (\n      <Card color={ status }>\n        <Card.Content>\n          <Card.Header>Cluster Health</Card.Header>\n          <Statistic color={ status }>\n            <Statistic.Value>{ status }</Statistic.Value>\n          </Statistic>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\n\nexport default ClusterHealth;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { getClusterOverview } from \"../../actions/clusterOverview.js\";\n\n// components \nimport { Grid } from 'semantic-ui-react'; \nimport ClusterHealth from \"../cards/ClusterHealth.js\";\n\n\nclass ClusterOverview extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.getClusterOverview();\n  }\n\n  render() {\n    const { clusterOverview } = this.props;\n\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column computer={5}></Grid.Column>\n          <Grid.Column computer={5}>\n            <ClusterHealth status={clusterOverview.status} />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    clusterOverview: state.clusterOverview.content\n  };\n}\n\nexport default connect(mapStateToProps, { getClusterOverview })(ClusterOverview);\n","import { SET_CLUSTER_OVERVIEW } from \"../constants/actionTypes.js\";\nimport clusterHealth from \"../api/cluster_health.json\";\n\n\nexport const getClusterOverview = () => async (dispatch) => {\n  dispatch({\n    type: SET_CLUSTER_OVERVIEW,\n    payload: clusterHealth\n  });\n}\n\n\n\n\n","\n// users \nexport const LOGIN = \"LOGIN\";\nexport const LOGOUT = \"LOGOUT\";\n\n// cluster overview\nexport const SET_CLUSTER_OVERVIEW = \"SET_CLUSTER_OVERVIEW\";\n\n// cluster stats \nexport const SET_CLUSTER_STATS = \"SET_CLUSTER_STATS\";\n\n// nodes\nexport const SET_NODES = \"SET_NODES\";\n\n// indices\nexport const SET_INDICES = \"SET_INDICES\";","import React, { Component } from 'react';\n\n// components\nimport { Card, Statistic } from 'semantic-ui-react'\n\n\nclass MetricCard extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const { title, metric, color } = this.props;\n\n    return (\n      <Card color={ color }>\n        <Card.Content>\n          <Card.Header>{ title }</Card.Header>\n          <Statistic color={ color }>\n            <Statistic.Value>{ metric }</Statistic.Value>\n          </Statistic>\n        </Card.Content>\n      </Card>\n    );\n  }\n}\n\n\nexport default MetricCard;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { getClusterStats} from \"../../actions/clusterStats.js\";\n\n// components \nimport { Grid } from \"semantic-ui-react\"; \nimport MetricCard from \"../cards/MetricCard.js\";\n\n\nclass ClusterStats extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n\n  getData = async () => {\n    this.setState({ isLoading: true });\n    await this.props.getClusterStats();\n    this.setState({ isLoading: false });\n  }\n\n  render() {\n    const { clusterStats } = this.props;\n\n    \n    if (this.state.isLoading) {\n      return (\n        <p>loading</p>\n      )\n    } else {\n      \n      const indexCount = clusterStats.indices.count;\n      const totalShardCount = clusterStats.indices.shards.total;\n      const pShardCount = clusterStats.indices.shards.primaries;\n      const rShardCount = clusterStats.indices.shards.replication;\n      const docCount = clusterStats.indices.docs.count;\n      const storeSize = clusterStats.indices.store.size;\n      const fieldDataMemory = clusterStats.indices.fielddata.memory_size;\n      const queryCacheSize = clusterStats.indices.query_cache.memory_size;\n      const segmentCount = clusterStats.indices.segments.count;\n    \n\n      return (\n        <Grid>\n          <Grid.Row>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Indices\"\n                metric={ indexCount }\n                color=\"grey\" />    \n            </Grid.Column>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Shards\"\n                metric={ totalShardCount }\n                color=\"grey\" />    \n            </Grid.Column>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Primary Shards\"\n                metric={ pShardCount }\n                color=\"grey\" />    \n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Replica Shards\"\n                metric={ rShardCount }\n                color=\"grey\" />    \n            </Grid.Column>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Segment Count\"\n                metric={ segmentCount }\n                color=\"grey\" />    \n            </Grid.Column>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Documents\"\n                metric={ docCount }\n                color=\"grey\" />    \n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Size\"\n                metric={ storeSize }\n                color=\"grey\" />    \n            </Grid.Column>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Field Data Memory\"\n                metric={ fieldDataMemory }\n                color=\"grey\" />    \n            </Grid.Column>\n            <Grid.Column mobile={16} tablet={8} computer={5}>\n              <MetricCard \n                title=\"Query Cache Size\"\n                metric={ queryCacheSize }\n                color=\"grey\" />    \n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    clusterStats: state.clusterStats.content\n  };\n}\n\nexport default connect(mapStateToProps, { getClusterStats })(ClusterStats);","import { SET_CLUSTER_STATS } from \"../constants/actionTypes.js\";\nimport clusterStats from \"../api/cluster_stats.json\";\n\n\nexport const getClusterStats = () => async (dispatch) => {\n  dispatch({\n    type: SET_CLUSTER_STATS,\n    payload: clusterStats\n  });\n}\n\n","import React from \"react\";\nimport { Segment, Icon } from 'semantic-ui-react';\n\n\nfunction NodeRoles(props) {\n\tconst { nodeRoles } = props;\n\n\treturn (\n\t\t<Segment.Group horizontal>\n\t\t\t{nodeRoles.map((role, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Segment key={i}>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tname=\"check\" \n\t\t\t\t\t\t\tcolor=\"green\" />\n\t\t\t\t\t\t{role}\n\t\t\t\t\t</Segment>\n\t\t\t\t)\n\t\t\t})}\n\t\t</Segment.Group>\n\t);\n}\n\nexport default NodeRoles;","import React from 'react';\nimport NodeRoles from \"./NodeRoles.js\";\nimport { Table } from 'semantic-ui-react';\n\n\nfunction NodeDetails(props) {\n  const { nodeData } = props;  \n\n  // creates an array of node attributes that are strings to display on the table\n  const stringAttributes = [];\n  for (const data in nodeData) {\n    if (typeof nodeData[data] === \"string\") {\n      stringAttributes.push([data, nodeData[data]]);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <NodeRoles \n        nodeRoles={nodeData.roles} />\n      <Table definition>\n        <Table.Body>\n        {stringAttributes.map((attribute, i) => {\n          return (\n            <Table.Row \n              key={i}>\n                <Table.Cell width={3}>{attribute[0]}</Table.Cell>\n                <Table.Cell width={8}>{attribute[1]}</Table.Cell>\n            </Table.Row>\n          )\n        })}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n}\n\nexport default NodeDetails;","import React from 'react';\nimport NodeDetails from \"./NodeDetails.js\";\nimport { Accordion, Icon } from 'semantic-ui-react'\n\n\nfunction Node(props) {\n\tconst { nodeData, activeIndex, index, handleClick } = props;\n\n  return (\n    <React.Fragment>\n      <Accordion.Title \n        key={index}\n        active={activeIndex === index}\n        index={index}\n        onClick={handleClick}>\n        <Icon name=\"dropdown\" />\n        { nodeData.name }\n      </Accordion.Title>\n      <Accordion.Content active={activeIndex === 0}>\n        <NodeDetails \n          nodeData={nodeData} />\n      </Accordion.Content>\n    </React.Fragment>\n\t)\n}\n\nexport default Node;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { getNodes } from \"../../actions/nodes.js\";\n\n// components\nimport { Accordion } from \"semantic-ui-react\";\nimport Node from \"../common/Node.js\";\n\n\nclass Nodes extends Component {\n\n  constructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\tactiveIndex: 0,\n\t\t\tisLoading: true\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n    this.getData();\n  }\n\n\t// fetches the nodes data from the api\n\tgetData = async () => {\n    this.setState({ isLoading: true });\n    await this.props.getNodes();\n    this.setState({ isLoading: false });\n  }\n\n\t// handles the accordian clicks\n\thandleClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    this.setState({ activeIndex: newIndex });\n  }\n\t\n\trender() {\n\t\tconst { nodes } = this.props;\n\t\tconst { activeIndex } = this.state;\n\n\t\treturn (\n\t\t\t<Accordion fluid styled>\n\t\t\t\t{nodes.map((node, i) => {\n\t\t\t\t\treturn (\n            <Node \n              key={i}\n\t\t\t\t\t\t\tnodeData={node}\n\t\t\t\t\t\t\tactiveIndex={activeIndex}\n\t\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\t\thandleClick={this.handleClick} />\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Accordion>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    nodes: state.nodeStats.nodes\n  };\n}\n\nexport default connect(mapStateToProps, { getNodes })(Nodes);","import { SET_NODES } from \"../constants/actionTypes.js\";\nimport nodeStats from \"../api/nodes.json\";\n\n\nexport const getNodes = () => async (dispatch) => {\n\tconst nodes = [];\n\tfor (const node in nodeStats.nodes) {\n\t\tnodes.push(nodeStats.nodes[node]);\n\t}\n\n  dispatch({\n\t\ttype: SET_NODES,\n\t\tpayload: nodes\n  });\n}","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\n\nfunction IndexDetails(props) {\n  const { indexData } = props;  \n\n  const indexAttributes = [];\n  for (const data in indexData) {\n    indexAttributes.push([data, indexData[data]]);\n  }\n\n  return (\n    <React.Fragment>\n      <Table definition>\n        <Table.Body>\n        {indexAttributes.map((attribute, i) => {\n          return (\n            <Table.Row \n              key={i}>\n                <Table.Cell width={3}>{attribute[0]}</Table.Cell>\n                <Table.Cell width={8}>{attribute[1]}</Table.Cell>\n            </Table.Row>\n          )\n        })}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n}\n\nexport default IndexDetails;","import React from \"react\";\n\n// components\nimport { Accordion, Icon } from \"semantic-ui-react\";\nimport IndexDetails from \"./IndexDetails.js\";\n\n\nfunction Index(props) {\n  const { indexData, activeIndex, index, handleClick } = props;\n\n  return (\n    <React.Fragment>\n      <Accordion.Title \n        active={activeIndex === index}\n        index={index}\n        onClick={handleClick}>\n        <Icon name=\"dropdown\" />\n        { indexData.index }\n      </Accordion.Title>\n      <Accordion.Content active={activeIndex === index}>\n        <IndexDetails \n          indexData={indexData} />\n      </Accordion.Content>\n    </React.Fragment>\n\t)\n}\n\nexport default Index;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { getIndices } from \"../../actions/indices.js\";\n\n// components \nimport { Accordion, Icon, AccordionContent } from \"semantic-ui-react\";\nimport Index from \"../common/Index.js\";\n\n\n\nclass Indices extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      showIndices: false,\n      activeIndex: 0\n    }\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n\t// fetches the nodes data from the api\n\tgetData = async () => {\n    this.setState({ isLoading: true });\n    await this.props.getIndices();\n    this.setState({ isLoading: false });\n  }\n\n  toggleIndices = () => {\n    this.setState({ showIndices: !this.state.showIndices });\n  }\n\n  // handles the accordian clicks\n\thandleClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const { activeIndex } = this.state;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    this.setState({ activeIndex: newIndex });\n  }\n\n  render() {\n    const { isLoading, showIndices, activeIndex } = this.state;\n    const { indices } = this.props;\n\n    return (\n      <Accordion fluid styled>\n        <Accordion.Title\n          active={showIndices} \n          index={0}\n          onClick={this.toggleIndices} >\n          <Icon name=\"dropdown\" />\n          Indices\n          </Accordion.Title>\n          <Accordion.Content active={showIndices}>\n          {indices.map((index, i) => (\n            <Index \n              key={i}\n              indexData={index}\n              activeIndex={activeIndex}\n              index={i}\n              handleClick={this.handleClick} />\n            ))}\n          </Accordion.Content>\n        \n      </Accordion>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    indices: state.indicesStats.indices\n  };\n}\n\nexport default connect(mapStateToProps, { getIndices })(Indices);","import { SET_INDICES } from \"../constants/actionTypes.js\";\nimport indicesStats from \"../api/indices.json\";\n\n\nexport const getIndices = () => async (dispatch) => {\n  dispatch({\n\t\ttype: SET_INDICES,\n\t\tpayload: indicesStats\n  });\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\n// components\nimport { Container, Grid } from 'semantic-ui-react'; \nimport ClusterOverview from \"../segments/ClusterOverview.js\";\nimport ClusterStats from \"../segments/ClusterStats.js\";\nimport Nodes from \"../segments/Nodes.js\";\nimport Indices from \"../segments/Indices.js\";\n\n\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Container>\n        <Grid>\n          <Grid.Row>\n            <Grid.Column computer={16}>\n              <ClusterOverview />  \n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column computer={16}>\n              <ClusterStats />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column computer={16}>\n              <Nodes />\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column computer={16}>\n              <Indices />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.users.user,\n    loggedIn: state.users.loggedIn\n  };\n}\n\nexport default connect(mapStateToProps, {})(Dashboard);\n\n\n\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// redux\nimport { connect } from \"react-redux\";\n\n// components\nimport Login from \"./components/auth/Login.js\";\nimport Dashboard from \"./components/dashboard\";\n\n\nfunction App(props) {\n  if (props.loggedIn) {\n    return (\n      <Dashboard />\n    );\n  } else {\n    return (\n      <div>\n        <Login />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.users.user,\n    loggedIn: state.users.loggedIn\n  };\n}\n\nexport default connect(mapStateToProps, {})(App);\n","import { LOGIN, LOGOUT } from \"../constants/actionTypes.js\";\n\n\nconst initialState = {\n  user: {\"first_name\": \"Mitchell\", \"last_name\": \"Pottratz\"},\n  loggedIn: true\n};\n\nconst userReducer = (state=initialState, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        user: {\"first_name\": \"Mitchell\", \"last_name\": \"Pottratz\"},\n        loggedIn: true\n      };\n\n    case LOGOUT:\n      return {\n        ...state,\n        user: {}, \n        loggedIn: false\n      };\n    \n    default:\n      return state;\n  }\n}\n\nexport default userReducer;","import { SET_CLUSTER_OVERVIEW } from \"../constants/actionTypes.js\";\n\n\nconst initialState = {\n  content: {}\n}\n\nexport const clusterOverviewReducer = (state=initialState, action) => {\n  switch (action.type) {\n    case SET_CLUSTER_OVERVIEW:\n      return {\n        ...state,\n        content: action.payload\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default clusterOverviewReducer;","import { SET_CLUSTER_STATS } from \"../constants/actionTypes.js\";\n\nconst initialState = {\n  content: {}\n}\n\nconst clusterStatsReducer = (state=initialState, action) => {\n  switch (action.type) {\n    case SET_CLUSTER_STATS:\n      return {\n        ...state,\n        content: action.payload\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default clusterStatsReducer;","import { SET_NODES } from \"../constants/actionTypes.js\";\n\nconst initialState = {\n\tnodes: []\n}\n\nconst nodesReducer = (state=initialState, action) => {\n\tswitch (action.type) {\n\t\tcase SET_NODES:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tnodes: action.payload\n\t\t\t};\n\t\t\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default nodesReducer;","import { SET_INDICES } from \"../constants/actionTypes.js\";\n\nconst initialState = {\n  indices: []    \n}\n\n\nconst indicesReducer = (state=initialState, action) => {\n  switch (action.type) {\n    case SET_INDICES:\n      return {\n        ...state,\n        indices: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\n\nexport default indicesReducer;","import { combineReducers } from \"redux\";\nimport userReducer from \"./userReducer.js\";\nimport clusterOverviewReducer from \"./clusterOverviewReducer.js\";\nimport clusterStatsReducer from \"./clusterStatsReducer.js\";\nimport nodesReducer from \"./nodesReducer.js\";\nimport indicesReducer from \"./indicesReducer.js\";\n\nexport default combineReducers({\n  users: userReducer,\n  clusterOverview: clusterOverviewReducer,\n  clusterStats: clusterStatsReducer,\n  nodeStats: nodesReducer,\n  indicesStats: indicesReducer\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n// css \nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport './index.css';\n\n// redux\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer.js\";\nimport thunkMiddleWare from \"redux-thunk\";\n\nconst store = createStore(rootReducer, compose(applyMiddleware(thunkMiddleWare)));\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}